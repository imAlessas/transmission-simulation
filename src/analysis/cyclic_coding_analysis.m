clc, clear, format compact


% --------- TASK 5 -------------


import communications.*
% needed to use cyclgen function



% Get binary data by encoding your name
m = 31; % codeword length
r = round(log2(m + 1) + 0.49); % check symbols
k = m - r; % data symbols
generation_polynomial = [1 0 0 1 0 1]; % z^5 + z^2 + z^0

% generated by your name: 26 symbols
% vocals = 1, consonants = 0
binary_data =  [1 0 1 0 0 1 0 0 0 1 0 0 1 0 1 0 1 1 0 1 0 0 1 0 0 0];

% generate decoding and encoding matrix
[cyclic_decoding_matrix, cyclic_encoding_matrix] = cyclgen(m, [1 0 0 1 0 1]);

% reorder the matrix
% copy this reorder index in index on function put zero at the beginning: [0  8 9 ... 31 1 2 ... 6]
reorder = [6:m, 1:5]; % change data symbols position: first 6 -> 32, then 0 -> 5
cyclic_encoding_matrix = cyclic_encoding_matrix (:, reorder); % copy in function encHamming
cyclic_decoding_matrix = (cyclic_decoding_matrix (:, reorder))'; % copy in function decHamming

% encode the codeword
codeword = mod(binary_data * cyclic_encoding_matrix, 2);
% decode without errors
syndrome_no_error = mod(codeword * cyclic_decoding_matrix, 2)


% introduce one error
codeword(19) =~ codeword(19);
syndrome_one_error = mod(codeword * cyclic_decoding_matrix, 2)
binary_to_decimal(syndrome_one_error)






% finish
function [syndrome_decimal_value] = binary_to_decimal(binary_vector)
    n = length(binary_vector);
    sum = 0;
    for i = 1 : 1 : n
        sum = sum + binary_vector(i) * 2^(n - i);
    end

    syndrome_decimal_value = sum;
end